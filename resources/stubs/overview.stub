<template>
    <div class="section">
        <nav class="level">
            <div class="level-left">
                <div class="level-item baseline">
                    <h1 class="title p-r-md">{%ModelPlural%} overzicht</h1>
                    <h2 class="subtitle" v-if="table.meta.total && table.meta.to">({{table.meta.from}} t/m {{table.meta.to}} van {{table.meta.total}})</h2>
                </div>
            </div>
        </nav>
        <section>

            <nav class="level">
                <div class="level-left">
                    <div class="level-item">
                        <div class="field has-addons">
                            <div class="control">
                                <b-select v-model="table.perPage">
                                <option v-for="(option, index) in table.perPageOptions" :key="index" :value="option">{{option}} per pagina</option>
                                </b-select>
                            </div>
                            <div class="control">
                                <button class="button" @click="filter.visible = !filter.visible">
                                    <span class="icon is-small"><i class="fas fa-filter"></i></span>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="level-item">
                        <OverviewAction v-if="table.checkedRows.length > 0"></OverviewAction>
                    </div>
                </div>
                <div class="level-right">
                    <div class="level-item">
                        <div class="control">
                            <router-link :to="{name: '{%ModelLink%}-create'}" v-acl="'{%Acl%}.add'" class="button is-default">
                                <span class="icon is-small"><i class="fas fa-plus"></i></span>
                                <span>{%ModelSingle%} aanmaken</span>
                            </router-link>
                        </div>
                    </div>
                </div>
            </nav>

            <section>
                <OverviewFilter model="{%ModelNamespace%}" @filter="setFilter($event)" :showFilter="filter.visible" v-if="filter.items.length > 0 || filter.visible"></OverviewFilter>
            </section>

            <b-table
                    icon-pack="fa"
                    detail-key="id"
                    @sort="onSort"
                    @page-change="onPageChange"
                    :data="table.data"
                    :loading="loading"
                    :total="table.meta.total"
                    :per-page="table.perPage"
                    :opened-detailed="table.defaultOpenedDetails"
                    :checked-rows.sync="table.checkedRows"
                    :default-sort-direction="table.defaultSortOrder"
                    :default-sort="[table.sortField, table.sortOrder]"
                    checkable backend-sorting paginated backend-pagination>

                <template slot-scope="props">
                    {%Columns%}
                    <b-table-column label="Acties">
                        <router-link :to="{name: '{%ModelLink%}-detail', params: {id: props.row.id}}" v-acl="'{%Acl%}.read'">
                            <b-tooltip label="Bekijk details">
                                <span class="icon is-medium"><i class="fas fa-eye"></i></span>
                            </b-tooltip>
                        </router-link>
                        <router-link :to="{name: '{%ModelLink%}-edit', params: {id: props.row.id}}" v-acl="'{%Acl%}.edit'">
                            <b-tooltip label="Wijzigen">
                                <span class="icon is-medium"><i class="fas fa-edit"></i></span>
                            </b-tooltip>
                        </router-link>
                        <a @click="confirmDelete(props.row.id)" v-acl="'{%Acl%}.delete'">
                            <b-tooltip label="Verwijderen">
                                <span class="icon is-medium"><i class="fas fa-trash-alt"></i></span>
                            </b-tooltip>
                        </a>
                    </b-table-column>
                </template>
                <template slot="empty" v-if="!loading">
                    <section class="section">
                        <div class="content has-text-grey has-text-centered">
                            <p>
                                <b-icon icon="fa fa-frown" size="is-large"></b-icon>
                            </p>
                            <p>Niets gevonden.</p>
                        </div>
                    </section>
                </template>
            </b-table>
        </section>

    </div>
</template>
<script>

    export default {

        data()
        {
            return {
                loading: false,
                filter: {
                    visible: false,
                    items: []
                },
                table: {
                    data: [],
                    meta: [],
                    sortField: "id",
                    sortOrder: "desc",
                    defaultSortOrder: "desc",
                    page: 1,
                    perPage: 20,
                    perPageOptions: [20, 50, 100, 500],
                    defaultOpenedDetails: [],
                    checkedRows: [],
                },
            }
        },
        mounted()
        {
            this.loadData()
        },

        watch: {
            perPage() { this.loadData() },
            '$route': 'loadData'
        },

        methods: {

            /**
             * @autogenerated
             * @return void
             */
            loadData()
            {
                this.loading = true
                let params = this.prepareParams() + this.prepareFilters()

                this.$http.get("{%ModelUrl%}/?" + params)
                    .then(({data}) => {
                        this.clearTableData()
                        this.table.meta = data.meta
                        this.table.data = data.data
                        this.loading = false
                    })
                    .catch((error) => {
                        this.clearTableData()
                        this.loading = false

                    })
            },

            /**
             * @autogenerated
             * @return string
             */
            prepareParams()
            {
                return [
                    "sort=" + this.table.sortField + "|" + this.table.sortOrder,
                    "page=" + this.table.page,
                    "per_page=" + this.table.perPage
                ].join("&")
            },

            /**
             * @autogenerated
             * @return string
             */
            prepareFilters()
            {
                this.filter.visible = false
                return this.filter.items ? "&search=" + this.filter.items.join("|") : ""
            },

            /**
             * @autogenerated
             * @param filters string
             * @return void
             */
            setFilter(filters)
            {
                this.filter.items = (filters !== "")  ? filters.split("|") : []
                this.loadData()
            },

            /**
             * @autogenerated
             * @param page int
             * @return void
             */
            onPageChange(page)
            {
                this.table.page = page
                this.loadData()
            },

            /**
             * @autogenerated
             * @return void
             */
            onSort(field, order)
            {
                this.table.sortField = field
                this.table.sortOrder = order
                this.loadData()
            },

            /**
             * @autogenerated
             * @return void
             */
            confirmDelete(id)
            {
                if(this.$store.getters.hasAccess('{%Acl%}.delete')){
                    this.$dialog.confirm({
                        message: "Weet je zeker dat je deze {%ModelSingle%} wilt verwijderen?",
                        onConfirm: () => {
                            this.$http.delete("{%ModelUrl%}/" + id)
                                .then(({data}) => {
                                    this.$toast.open({type: "is-success", message: data.message, duration: 3000})
                                    this.loadData()
                                })
                                .catch(({response}) => {
                                    this.$toast.open({ type: "is-danger", message: response.data.message, duration: 3000 })
                                })
                        }
                    })
                } else {
                    this.$buefy.toast.open({type:'is-danger', message: 'Geen toegang'})
                }
            },

            /**
             * @autogenerated
             * @return void
             */
            clearTableData()
            {
                this.table.meta.total = 0
                this.table.data = []
                this.table.checkedRows = []
            },
        }
    }
</script>
