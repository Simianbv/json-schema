<template>
    <div class="section">
        <div class="columns is-mobile">
            <div class="column is-full-mobile is-three-quarters-desktop">
                <h1 class="title is-3">{%Name%} {{ newResource ? 'cre&euml;en' : 'bewerken'}}</h1>

                <SchemaForm v-if="schema && ui_schema"
                            :schema="schema"
                            :ui-schema="ui_schema"
                            v-model="model"
                            class="form has-background-light"
                            @submit="submit($event)">
                    <slot v-slot="actions">
                        <div class="control">
                            <a class="button is-text" @click="$router.go(-1)">Annuleren</a>
                        </div>
                        <div class="control">
                            <button type="submit" class="button is-primary"><span>{{buttonLabel}}</span></button>
                        </div>
                    </slot>
                </SchemaForm>
            </div>
        </div>
    </div>
</template>
<script>

    import SchemaForm from '../../components/schema/SchemaForm.vue'

    export default
    {
        name: "{%Model%}-form",
        props: ["id"],
        components: {SchemaForm},
        data()
        {
            return {
                loading_state: 0,
                max_loading_state: 2,
                buttonLabel: "Opslaan",
                isNewResource: true,
                ui_schema: null,
                schema: null,
                filter_schema: null,
                model: {},
                baseResource: null
            }
        },

        computed: {

            /**
             * Returns true if the current resource is a newly created resource, false if not.
             *
             * @autogenerated
             * @return boolean
             */
            newResource()
            {
                return this.isNewResource === true
            },

            loading(){
                return this.loading_state !== this.max_loading_state
            },
        },

        /**
         * @autogenerated
         * @return void
         */
        mounted()
        {
            if(this.id){
                this.loadBaseResource();
                this.isNewResource = false;
            }

            this['{%Service%}'].get("/schema/properties/{%Uri%}").then(({data}) => {
                this.schema = data;
                this.loading_state++;
            });
            this['{%Service%}'].get("/schema/layout/{%Uri%}").then(({data}) => {
                this.ui_schema = data;
                this.loading_state++;
            })
        },

        methods: {

            /**
             * Create a new {{%Model%}} resource or update an existing one.
             *
             * @autogenerated
             * @return void
             */
            submit()
            {
                let method = this.newResource ? 'post' : 'put'
                let url = '{%Url%}' + (!this.newResource ? '/' + this.baseResource.id + '/' : '/')

                this["{%Service%}"][method](url, this.form.all()).then(({data}) => {
                    this.$toast.open({ type: 'is-success', message: data.message, duration: 5000 })
                    this.$router.go(-1)
                }).catch(({response}) => {
                    this.$toast.open({ type: 'is-danger', message: response.data.message, duration: 5000 })
                    this.form.onFail(response.data.errors);
                })
            },
        },
    }
</script>
